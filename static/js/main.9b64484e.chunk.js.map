{"version":3,"sources":["network.js","components/ContactCard.js","components/ContactForm.js","components/Kmodal.js","App.js","Contact.js","index.js"],"names":["addContactOnServer","name","phone","axios","post","data","console","log","getAllContacts","a","get","updateContactOnServer","id","patch","deleteContactOnServer","delete","getContactById","ContactCard","contact","onOpen","getContactId","deleteContact","color","justify","bg","p","borderRadius","boxShadow","mb","width","m","colorScheme","to","align","mr","size","icon","faUser","onClick","faEdit","faTrash","ContactForm","addNewContact","onClose","updateContact","useState","setName","setPhone","onSubmit","value","type","onChange","e","target","alignSelf","Kmodal","isOpen","children","title","App","useDisclosure","isOpenEdit","onOpenEdit","onCloseEdit","searchData","setSearchData","contacts","setContacts","contactId","setContactId","useEffect","tempArray","Object","entries","forEach","key","push","fetchContacts","findIndex","searchContacts","filter","includes","prev","selectContact","find","src","w","h","as","textTransform","fontSize","fontWeight","Add","pointerEvents","Search2","focusBorderColor","placeholder","map","Contact","setContact","params","useParams","fetchContact","ArrowBack","height","username","email","website","ReactDOM","render","StrictMode","path","exact","document","getElementById"],"mappings":"iSAEaA,EAAkB,uCAAG,WAAOC,EAAMC,GAAK,kGAEzBC,IAAMC,KAAK,8CAEhC,CAACH,OAAMC,UACP,KAAD,EAHW,OAGX,SAHOG,EAAI,EAAJA,KAAI,kBAILA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBAV8B,wCAYlBC,EAAc,uCAAG,8BAAAC,EAAA,+EAEHN,IAAMO,IAAI,8CAE/B,KAAD,EAFW,OAEX,SAFOL,EAAI,EAAJA,KAAI,kBAGLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,kBAT0B,mCAWdI,EAAqB,uCAAG,WAAOV,EAAMC,EAAOU,GAAE,kGAEhCT,IAAMU,MAAM,8CAAD,OACcD,GAC9C,CAAEX,OAAMC,UACR,KAAD,EAHW,OAGX,SAHOG,EAAI,EAAJA,KAAI,kBAILA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBAViC,0CAWrBO,EAAqB,uCAAG,WAAOF,GAAE,kGAEnBT,IAAMY,OAAO,8CAAD,OACaH,IAC9C,KAAD,EAFW,OAEX,SAFOP,EAAI,EAAJA,KAAI,kBAGLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBATiC,sCAWrBS,EAAc,uCAAG,WAAOJ,GAAE,kGAEZT,IAAMO,IAAI,8CAAD,OACgBE,IAC9C,KAAD,EAFW,OAEX,SAFOP,EAAI,EAAJA,KAAI,kBAGLA,GAAI,gCAEXC,QAAQC,IAAI,EAAD,IAAQ,yDAEtB,gBAT0B,sC,4ECKZU,EA/CK,SAAH,GAA0D,IAApDC,EAAO,EAAPA,QAASC,EAAM,EAANA,OAAQC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cAUpD,OACE,eAAC,IAAI,CACHC,MAAM,QACNC,QAAQ,gBACRC,GAAG,WACHC,EAAE,IACFC,aAAa,KACbC,UAAU,KACVC,GAAG,IACHC,MAAM,MACNC,EAAE,YACFC,YAAY,OAAM,UAElB,cAAC,IAAI,CAACC,GAAE,wBAAmBd,EAAQN,IAAK,SACtC,eAAC,IAAI,CAACqB,MAAM,SAAQ,UAClB,cAAC,IAAG,CAACC,GAAG,IAAG,SACT,cAAC,IAAe,CAACC,KAAK,KAAKC,KAAMC,IAAQH,GAAG,QAE9C,eAAC,IAAK,WACJ,cAAC,IAAI,UAAEhB,EAAQjB,OACf,cAAC,IAAI,UAAEiB,EAAQhB,gBAKrB,eAAC,IAAI,CAAC+B,MAAM,SAAQ,UAClB,cAAC,IAAG,CAACC,GAAG,IAAII,QAAS,kBAnCJ1B,EAmCwBM,EAAQN,GAlCrDQ,EAAaR,QACbO,IAFoB,IAACP,GAmCoC,SACnD,cAAC,IAAe,CAACuB,KAAK,KAAKC,KAAMG,QAEnC,cAAC,IAAG,CAACjB,MAAM,UAAUgB,QAAS,kBAjCN1B,EAiCiCM,EAAQN,QAhCrES,EAAcT,GADa,IAACA,GAiC6C,SACnE,cAAC,IAAe,CAACuB,KAAK,KAAKC,KAAMI,e,iBCQ5BC,EA9CK,SAAH,GAA4D,IAAtDC,EAAa,EAAbA,cAAeC,EAAO,EAAPA,QAASzB,EAAO,EAAPA,QAAS0B,EAAa,EAAbA,cACtD,EAAwBC,mBAAS3B,EAAUA,EAAQjB,KAAO,IAAG,mBAAtDA,EAAI,KAAE6C,EAAO,KACpB,EAA0BD,mBAAS3B,EAAUA,EAAQhB,MAAQ,IAAG,mBAAzDA,EAAK,KAAE6C,EAAQ,KACtBzC,QAAQC,IAAIW,GACZ,IAAM8B,EAAW,WACX9B,GACFZ,QAAQC,IAAI,SACZqC,EAAc3C,EAAMC,EAAOgB,EAAQN,IACnC+B,MAEAD,EAAczC,EAAMC,GACpByC,MAIJ,OACE,eAAC,IAAK,WACJ,eAAC,IAAW,CAAC/B,GAAG,OAAM,UACpB,cAAC,IAAS,UAAC,SACX,cAAC,IAAK,CACJqC,MAAOhD,EACPiD,KAAK,OACLC,SAAU,SAACC,GAAC,OAAKN,EAAQM,EAAEC,OAAOJ,aAGtC,eAAC,IAAW,CAACrC,GAAG,QAAO,UACrB,cAAC,IAAS,UAAC,cACX,cAAC,IAAK,CACJqC,MAAO/C,EACPgD,KAAK,QACLC,SAAU,SAACC,GAAC,OAAKL,EAASK,EAAEC,OAAOJ,aAGtC/B,EACC,cAAC,IAAM,CAACoB,QAASU,EAAUjB,YAAY,OAAOuB,UAAU,WAAU,SAAC,mBAInE,cAAC,IAAM,CAAChB,QAASU,EAAUjB,YAAY,OAAOuB,UAAU,WAAU,SAAC,oB,SCtB5DC,EAfA,SAAH,GAAY,EAANpC,OAAgD,IAAxCqC,EAAM,EAANA,OAAQb,EAAO,EAAPA,QAASc,EAAQ,EAARA,SAAUC,EAAK,EAALA,MACnD,OACE,mCACE,eAAC,IAAK,CAACF,OAAQA,EAAQb,QAASA,EAAQ,UACtC,cAAC,IAAY,IACb,eAAC,IAAY,WACX,cAAC,IAAW,UAAEe,IACd,cAAC,IAAgB,IACjB,cAAC,IAAS,UAAED,aC4IPE,EAzIH,WACV,MAAoCC,cAA5BJ,EAAM,EAANA,OAAQrC,EAAM,EAANA,OAAQwB,EAAO,EAAPA,QAExB,EAIIiB,cAHMC,EAAU,EAAlBL,OACQM,EAAU,EAAlB3C,OACS4C,EAAW,EAApBpB,QAEF,EAAoCE,mBAAS,IAAG,mBAAzCmB,EAAU,KAAEC,EAAa,KAChC,EAAgCpB,mBAAS,IAAG,mBAArCqB,EAAQ,KAAEC,EAAW,KAC5B,EAAkCtB,qBAAU,mBAArCuB,EAAS,KAAEC,EAAY,KAE9BC,qBAAU,YACW,uCAAG,8BAAA7D,EAAA,sEACDD,IAAiB,KAAD,EAA7BH,EAAI,OACJkE,EAAY,GACL,OAATlE,GACFmE,OAAOC,QAAQpE,GAAMqE,SAAQ,YAAmB,IAAD,mBAAhBC,EAAG,KAAE1B,EAAK,KACvCsB,EAAUK,KAAK,CAAEhE,GAAI+D,EAAK1E,KAAMgD,EAAMhD,KAAMC,MAAO+C,EAAM/C,WAI7DiE,EAAYI,GAAW,2CACxB,kBAVkB,mCAWnBM,KACC,IAEH,IAAMnC,EAAa,uCAAG,WAAOzC,EAAMC,GAAK,2EAE0B,IAA9DgE,EAASY,WAAU,SAAC5D,GAAO,OAAKA,EAAQhB,QAAUA,MACxC,KAAVA,EAAY,gCAEOF,EAAmBC,EAAMC,GAAO,KAAD,EAA5CG,EAAI,OACVC,QAAQC,IAAIF,GACZ8D,EAAY,GAAD,mBAAKD,GAAQ,CAAE,CAAEjE,OAAMC,QAAOU,GAAIP,EAAKJ,SAAS,2CAE9D,gBATkB,wCAWf8E,EAAiBb,EAASc,QAAO,SAAC9D,GAAO,OAC3CA,EAAQjB,KAAKgF,SAASjB,MAGlB5C,EAAe,SAACR,GACpByD,EAAazD,IAGTgC,EAAa,uCAAG,WAAO3C,EAAMC,EAAOU,GAAE,uFACvBD,EAAsBV,EAAMC,EAAOU,GAAI,KAAD,EAAnDP,EAAI,OAEV8D,GAAY,SAACe,GAAI,4BACZhB,EAASc,QAAO,SAAC9D,GAAO,OAAKA,EAAQN,KAAOA,MAAG,CAClD,CAAEX,KAAMI,EAAKJ,KAAMC,MAAOG,EAAKH,MAAOU,WACrC,2CACJ,gBAPkB,0CASbS,EAAa,uCAAG,WAAOT,GAAE,iFACVE,EAAsBF,GAAI,KAAD,EAC/B,OADH,QAERuD,GAAY,SAACe,GAAI,mBACZhB,EAASc,QAAO,SAAC9D,GAAO,OAAKA,EAAQN,KAAOA,SAElD,2CACF,gBAPkB,sCAQfuE,EAAgBjB,EAASkB,MAAK,SAAClE,GAAO,OAAKA,EAAQN,KAAOwD,KAE9D,OACE,qCACE,cAAC,EAAM,CACLZ,OAAQA,EACRE,MAAO,kBACPvC,OAAQA,EACRwB,QAASA,EAAQ,SAEjB,cAAC,EAAW,CAACD,cAAeA,EAAeC,QAASA,MAEtD,cAAC,EAAM,CACLa,OAAQK,EACRH,MAAO,qBACPvC,OAAQ2C,EACRnB,QAASoB,EAAY,SAErB,cAAC,EAAW,CACVnB,cAAeA,EACf1B,QAASiE,EACTxC,QAASoB,MAGb,eAAC,IAAG,WACF,eAAC,IAAI,CAACtC,EAAE,IAAIF,QAAQ,SAASU,MAAM,SAASJ,MAAM,MAAMC,EAAE,WAAU,UAClE,cAAC,IAAK,CAACuD,IAAI,wDAAwDC,EAAE,OAAOC,EAAE,SAC9E,cAAC,IAAO,CAACC,GAAG,KAAKC,cAAc,YAAW,SAAC,kBAI7C,cAAC,IAAG,CAAChE,EAAE,IAAII,MAAM,MAAMC,EAAE,WAAU,SACjC,eAAC,IAAM,CACLN,GAAG,WACHF,MAAM,QACNgE,EAAE,OACFI,SAAS,KACTC,WAAW,OACX5D,YAAY,OACZO,QAASnB,EAAO,UAEhB,cAACyE,EAAA,EAAO,CAACL,EAAE,OAAOD,EAAE,OAAOpD,GAAG,MAAM,oBAGxC,cAAC,IAAG,CAACT,EAAE,IAAII,MAAM,MAAMC,EAAE,WAAU,SACjC,eAAC,IAAU,WACT,cAAC,IAAgB,CACf+D,cAAc,OACdpC,SAAU,cAACqC,EAAA,EAAW,CAACxE,MAAM,eAE/B,cAAC,IAAK,CACJyE,iBAAiB,WACjB7C,KAAK,MACL8C,YAAY,oBACZ7C,SAAU,SAACC,GAAC,OAAKa,EAAcb,EAAEC,OAAOJ,eAI9C,cAAC,IAAG,CAACxB,EAAE,IAAG,SACPsD,EAAekB,KAAI,SAAC/E,GAAO,OAC1B,cAAC,EAAW,CACVE,aAAcA,EACdD,OAAQ2C,EACR5C,QAASA,EAETG,cAAeA,GADVH,EAAQN,gB,0BCrEZsF,EAlEC,WACd,MAA8BrD,qBAAU,mBAAjC3B,EAAO,KAAEiF,EAAU,KACpBC,EAASC,cASf,OARA/B,qBAAU,YACU,uCAAG,4BAAA7D,EAAA,sEACAO,EAAeoF,EAAOxF,IAAI,KAAD,EAAtCP,EAAI,OACV8F,EAAW9F,GAAM,2CAClB,kBAHiB,mCAIlBiG,KACC,CAACF,EAAOxF,KACXN,QAAQC,IAAIW,GAEV,mCACGA,GACC,eAAC,IAAG,WACJ,eAAC,IAAI,CAACO,EAAE,IAAIF,QAAQ,SAASU,MAAM,SAASJ,MAAM,MAAMC,EAAE,WAAU,UAClE,cAAC,IAAK,CAACuD,IAAI,wDAAwDC,EAAE,OAAOC,EAAE,SAC9E,cAAC,IAAO,CAACC,GAAG,KAAKC,cAAc,YAAW,SAAC,kBAI7C,cAAC,IAAG,CAAChE,EAAE,IAAII,MAAM,MAAMC,EAAE,WAAU,SACjC,cAAC,IAAI,CAACE,GAAI,gBAAgB,SAC1B,eAAC,IAAM,CACLR,GAAG,WACHF,MAAM,QACNgE,EAAE,OACFI,SAAS,KACTC,WAAW,OACX5D,YAAY,OAAM,UAEpB,cAACwE,EAAA,EAAa,CAAChB,EAAE,OAAOD,EAAE,OAAOpD,GAAG,MAAM,cAI5C,cAAC,IAAI,CACHJ,EAAE,WACFR,MAAM,QACNC,QAAQ,gBACRC,GAAG,WACHC,EAAE,IACF+E,OAAO,QACP9E,aAAa,KACbC,UAAU,KACVC,GAAG,IACHC,MAAM,MAAK,SAEX,eAAC,IAAI,CAACI,MAAM,SAASJ,MAAM,MAAMC,EAAE,WAAU,UAC3C,cAAC,IAAG,CAACI,GAAG,IAAG,SACT,cAAC,IAAe,CAACC,KAAK,MAAMC,KAAMC,IAAQH,GAAG,QAE/C,eAAC,IAAK,WACJ,eAAC,IAAI,WAAC,UAAQhB,EAAQjB,QACtB,eAAC,IAAI,WAAC,cAAYiB,EAAQuF,YAC1B,eAAC,IAAI,WAAC,YAAUvF,EAAQwF,SACxB,eAAC,IAAI,WAAC,gBAAcxF,EAAQhB,SAC5B,eAAC,IAAI,WAAC,aAAWgB,EAAQyF,yBC7DvCC,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,IAAc,UACb,cAAC,IAAM,UACL,eAAC,IAAM,WACL,cAAC,IAAK,CAACC,KAAK,gBAAgBC,OAAK,WAC/B,cAAC,EAAG,MAEN,cAAC,IAAK,CAACD,KAAK,oBAAmB,SAC7B,cAAC,EAAO,eAMlBE,SAASC,eAAe,W","file":"static/js/main.9b64484e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const addContactOnServer = async (name, phone) => {\n  try {\n    const { data } = await axios.post(\n      `https://jsonplaceholder.typicode.com/users/`,\n      {name, phone }\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getAllContacts = async () => {\n  try {\n    const { data } = await axios.get(\n      `https://jsonplaceholder.typicode.com/users`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateContactOnServer = async (name, phone, id) => {\n  try {\n    const { data } = await axios.patch(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      { name, phone }\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteContactOnServer = async (id) => {\n  try {\n    const { data } = await axios.delete(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getContactById = async (id) => {\n  try {\n    const { data } = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { Box, Flex, Stack, Text } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport { faEdit, faTrash, faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Link } from \"react-router-dom\";\nconst ContactCard = ({ contact, onOpen, getContactId, deleteContact }) => {\n  const updateHandler = (id) => {\n    getContactId(id);\n    onOpen();\n  };\n\n  const deleteContactHandler = (id) => {\n    deleteContact(id);\n  };\n\n  return (\n    <Flex\n      color=\"white\"\n      justify=\"space-between\"\n      bg=\"teal.900\"\n      p=\"4\"\n      borderRadius=\"xl\"\n      boxShadow=\"xl\"\n      mb=\"4\"\n      width=\"60%\"\n      m=\"10px auto\"\n      colorScheme=\"teal\"\n    >\n      <Link to={`/Contact-Book/${contact.id}`}>\n        <Flex align=\"center\">\n          <Box mr=\"4\">\n            <FontAwesomeIcon size=\"3x\" icon={faUser} mr=\"4\" />\n          </Box>\n          <Stack>\n            <Text>{contact.name}</Text>\n            <Text>{contact.phone}</Text>\n          </Stack>\n        </Flex>\n      </Link>\n\n      <Flex align=\"center\">\n        <Box mr=\"4\" onClick={() => updateHandler(contact.id)}>\n          <FontAwesomeIcon size=\"2x\" icon={faEdit} />\n        </Box>\n        <Box color=\"red.300\" onClick={() => deleteContactHandler(contact.id)}>\n          <FontAwesomeIcon size=\"2x\" icon={faTrash} />\n        </Box>\n      </Flex>\n    </Flex>\n  );\n};\n\nexport default ContactCard;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormLabel } from \"@chakra-ui/form-control\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Stack } from \"@chakra-ui/layout\";\nimport React, { useState } from \"react\";\n\nconst ContactForm = ({ addNewContact, onClose, contact, updateContact }) => {\n  const [name, setName] = useState(contact ? contact.name : \"\");\n  const [phone, setPhone] = useState(contact ? contact.phone : \"\");\n  console.log(contact);\n  const onSubmit = () => {\n    if (contact) {\n      console.log(\"print\");\n      updateContact(name, phone, contact.id);\n      onClose();\n    } else {\n      addNewContact(name, phone);\n      onClose();\n    }\n  };\n\n  return (\n    <Stack>\n      <FormControl id=\"name\">\n        <FormLabel>Name</FormLabel>\n        <Input\n          value={name}\n          type=\"text\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"phone\">\n        <FormLabel>Phone No.</FormLabel>\n        <Input\n          value={phone}\n          type=\"phone\"\n          onChange={(e) => setPhone(e.target.value)}\n        />\n      </FormControl>\n      {contact ? (\n        <Button onClick={onSubmit} colorScheme=\"teal\" alignSelf=\"flex-end\">\n          Update Contact\n        </Button>\n      ) : (\n        <Button onClick={onSubmit} colorScheme=\"teal\" alignSelf=\"flex-end\">\n          Add Contact\n        </Button>\n      )}\n    </Stack>\n  );\n};\n\nexport default ContactForm;\n","import { ModalHeader } from \"@chakra-ui/modal\";\nimport { ModalBody } from \"@chakra-ui/modal\";\nimport { ModalCloseButton } from \"@chakra-ui/modal\";\nimport { ModalContent } from \"@chakra-ui/modal\";\nimport { ModalOverlay } from \"@chakra-ui/modal\";\nimport { Modal } from \"@chakra-ui/modal\";\nimport React from \"react\";\n\nconst Kmodal = ({ onOpen, isOpen, onClose, children, title }) => {\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={onClose} >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>{title}</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>{children}</ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Kmodal;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { AddIcon, Search2Icon } from \"@chakra-ui/icons\";\nimport { Image } from \"@chakra-ui/image\";\nimport { Input, InputGroup, InputLeftElement } from \"@chakra-ui/input\";\nimport {\n  addContactOnServer,\n  getAllContacts,\n  updateContactOnServer,\n  deleteContactOnServer,\n} from \"./network\";\nimport { Heading, Flex, Box } from \"@chakra-ui/layout\";\nimport { useEffect, useState } from \"react\";\n\nimport ContactCard from \"./components/ContactCard\";\nimport ContactForm from \"./components/ContactForm\";\nimport Kmodal from \"./components/Kmodal\";\n// import { Link } from \"react-router-dom\";\n\nconst App = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const {\n    isOpen: isOpenEdit,\n    onOpen: onOpenEdit,\n    onClose: onCloseEdit,\n  } = useDisclosure();\n  const [searchData, setSearchData] = useState(\"\");\n  const [contacts, setContacts] = useState([]);\n  const [contactId, setContactId] = useState();\n\n  useEffect(() => {\n    const fetchContacts = async () => {\n      const data = await getAllContacts();\n      const tempArray = []; \n      if (data !== null) {\n        Object.entries(data).forEach(([key, value]) => {\n          tempArray.push({ id: key, name: value.name, phone: value.phone });\n        });\n      }\n\n      setContacts(tempArray);\n    };\n    fetchContacts();\n  }, []);\n\n  const addNewContact = async (name, phone) => {\n    if (\n      contacts.findIndex((contact) => contact.phone === phone) === -1 &&\n      phone !== \"\"\n    ) {\n      const data = await addContactOnServer(name, phone);\n      console.log(data);\n      setContacts([...contacts, { name, phone, id: data.name }]);\n    }\n  };\n\n  let searchContacts = contacts.filter((contact) =>\n    contact.name.includes(searchData)\n  );\n\n  const getContactId = (id) => {\n    setContactId(id);\n  };\n\n  const updateContact = async (name, phone, id) => {\n    const data = await updateContactOnServer(name, phone, id);\n\n    setContacts((prev) => [\n      ...contacts.filter((contact) => contact.id !== id),\n      { name: data.name, phone: data.phone, id },\n    ]);\n  };\n\n  const deleteContact = async (id) => {\n    const data = await deleteContactOnServer(id);\n    if (data !== null) {\n      setContacts((prev) => [\n        ...contacts.filter((contact) => contact.id !== id),\n      ]);\n    }\n  };\n  let selectContact = contacts.find((contact) => contact.id === contactId);\n\n  return (\n    <>\n      <Kmodal\n        isOpen={isOpen}\n        title={\"Add New Contact\"}\n        onOpen={onOpen}\n        onClose={onClose} \n      >\n        <ContactForm addNewContact={addNewContact} onClose={onClose} /> \n      </Kmodal>\n      <Kmodal\n        isOpen={isOpenEdit}\n        title={\"Update New Contact\"}\n        onOpen={onOpenEdit}\n        onClose={onCloseEdit}\n      >\n        <ContactForm\n          updateContact={updateContact}\n          contact={selectContact}\n          onClose={onCloseEdit}\n        />\n      </Kmodal>\n      <Box>\n        <Flex p=\"4\" justify=\"center\" align=\"center\" width=\"60%\" m=\"0px auto\">\n          <Image src=\"https://cdn-icons-png.flaticon.com/512/151/151768.png\" w=\"40px\" h=\"40px\" />\n          <Heading as=\"h1\" textTransform=\"uppercase\">\n            Phone Book\n          </Heading>\n        </Flex>\n        <Box p=\"4\" width=\"60%\" m=\"0px auto\">\n          <Button\n            bg=\"teal.900\"\n            color=\"white\"\n            w=\"full\"\n            fontSize=\"xl\"\n            fontWeight=\"bold\"\n            colorScheme=\"teal\"\n            onClick={onOpen}\n          >\n            <AddIcon h=\"20px\" w=\"20px\" mr=\"4\" /> Add Contact\n          </Button>\n        </Box>\n        <Box p=\"4\" width=\"60%\" m=\"0px auto\">\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<Search2Icon color=\"teal.900\" />}\n            />\n            <Input\n              focusBorderColor=\"teal.900\"\n              type=\"tel\"\n              placeholder=\"Search Contact...\"\n              onChange={(e) => setSearchData(e.target.value)}\n            />\n          </InputGroup>\n        </Box>\n        <Box p=\"4\">\n          {searchContacts.map((contact) => (\n            <ContactCard\n              getContactId={getContactId}\n              onOpen={onOpenEdit}\n              contact={contact}\n              key={contact.id}\n              deleteContact={deleteContact}\n            />\n          ))}\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default App;\n","import { Box, Flex, Stack, Text } from \"@chakra-ui/layout\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { Button } from \"@chakra-ui/button\";   \nimport { ArrowBackIcon} from \"@chakra-ui/icons\";\nimport { Image } from \"@chakra-ui/image\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { getContactById } from \"./network\";\nimport { Heading } from \"@chakra-ui/layout\";\nimport { Link } from \"react-router-dom\";\nconst Contact = () => {\n  const [contact, setContact] = useState(); \n  const params = useParams(); \n  useEffect(() => {\n    const fetchContact = async () => {\n      const data = await getContactById(params.id);\n      setContact(data);\n    };\n    fetchContact();\n  }, [params.id]);  \n  console.log(contact);\n  return (\n    <>\n      {contact && (\n        <Box>\n        <Flex p=\"4\" justify=\"center\" align=\"center\" width=\"60%\" m=\"0px auto\">\n          <Image src=\"https://cdn-icons-png.flaticon.com/512/151/151768.png\" w=\"40px\" h=\"40px\" />\n          <Heading as=\"h1\" textTransform=\"uppercase\">\n            Phone Book\n          </Heading>\n        </Flex>\n        <Box p=\"4\" width=\"60%\" m=\"0px auto\">\n          <Link to={\"/Contact-Book\"}>\n          <Button\n            bg=\"teal.900\"\n            color=\"white\"\n            w=\"full\"\n            fontSize=\"xl\"\n            fontWeight=\"bold\"\n            colorScheme=\"teal\" \n          >\n          <ArrowBackIcon h=\"20px\" w=\"20px\" mr=\"4\" />Back\n          </Button>\n          </Link>\n        </Box>\n        <Flex\n          m=\"0px auto\"\n          color=\"white\"\n          justify=\"space-between\"\n          bg=\"teal.800\"\n          p=\"4\"\n          height=\"200px\"\n          borderRadius=\"xl\"\n          boxShadow=\"xl\"\n          mb=\"4\" \n          width=\"60%\" \n        >\n          <Flex align=\"center\" width=\"80%\" m=\"0px auto\">\n            <Box mr=\"4\">\n              <FontAwesomeIcon size=\"10x\" icon={faUser} mr=\"4\" />\n            </Box>\n            <Stack >\n              <Text>Name : {contact.name}</Text>\n              <Text>Username : {contact.username}</Text> \n              <Text>E-mail : {contact.email}</Text> \n              <Text>Contact No : {contact.phone}</Text> \n              <Text>Website : {contact.website}</Text> \n            </Stack>\n          </Flex>\n        </Flex>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Contact from \"./Contact\";\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <Router>\n        <Switch>\n          <Route path=\"/Contact-Book\" exact>\n            <App />\n          </Route>\n          <Route path=\"/Contact-Book/:id\"> \n            <Contact />\n          </Route>\n        </Switch>\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}